// Code generated by jtd-codegen for Rust v0.2.1

use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize)]
pub struct SessionState {
    #[serde(rename = "account")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub account: Option<Box<Account>>,

    #[serde(rename = "accountRole")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub accountRole: Option<Box<String>>,

    #[serde(rename = "dark")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub dark: Option<Box<bool>>,

    #[serde(rename = "lang")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub lang: Option<Box<String>>,

    #[serde(rename = "organization")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub organization: Option<Box<OrganizationMembership>>,

    #[serde(rename = "user")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub user: Option<Box<User>>,
}

#[derive(Serialize, Deserialize)]
pub enum AccountType {
    #[serde(rename = "organization")]
    Organization,

    #[serde(rename = "user")]
    User,
}

#[derive(Serialize, Deserialize)]
pub struct Account {
    #[serde(rename = "id")]
    pub id: String,

    #[serde(rename = "name")]
    pub name: String,

    #[serde(rename = "type")]
    pub type_: AccountType,

    #[serde(rename = "department")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub department: Option<Box<String>>,

    #[serde(rename = "departmentName")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub departmentName: Option<Box<String>>,
}

#[derive(Serialize, Deserialize)]
pub struct OrganizationMembership {
    #[serde(rename = "id")]
    pub id: String,

    #[serde(rename = "name")]
    pub name: String,

    #[serde(rename = "role")]
    pub role: String,

    #[serde(rename = "department")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub department: Option<Box<String>>,

    #[serde(rename = "departmentName")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub departmentName: Option<Box<String>>,

    #[serde(rename = "dflt")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub dflt: Option<Box<bool>>,
}

#[derive(Serialize, Deserialize)]
pub struct User {
    #[serde(rename = "email")]
    pub email: String,

    #[serde(rename = "id")]
    pub id: String,

    #[serde(rename = "name")]
    pub name: String,

    #[serde(rename = "organizations")]
    pub organizations: Vec<OrganizationMembership>,

    #[serde(rename = "adminMode")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub adminMode: Option<Box<i32>>,

    #[serde(rename = "asAdmin")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub asAdmin: Option<Box<UserRef>>,

    #[serde(rename = "ipa")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub ipa: Option<Box<i32>>,

    #[serde(rename = "isAdmin")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub isAdmin: Option<Box<i32>>,

    #[serde(rename = "pd")]
    #[serde(skip_serializing_if = "Option::is_none")]
    pub pd: Option<Box<String>>,
}

#[derive(Serialize, Deserialize)]
pub struct UserRef {
    #[serde(rename = "id")]
    pub id: String,

    #[serde(rename = "name")]
    pub name: String,
}
